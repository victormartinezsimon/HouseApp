cmake_minimum_required(VERSION 3.12)

message(STATUS "command for cmake")
message(STATUS "cmake -DCMAKE_TOOLCHAIN_FILE=/home/pi/Desktop/vcpkg/scripts/buildsystems/vcpkg.cmake ..")

# Nombre del proyecto
project(my_project)

# Establecer el estándar de C++
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Añade los archivos fuente y de cabecera
set(SOURCES
    Src/main.cpp
    Src/DatabaseConnector.cpp
    Src/WebConnector.cpp
    Src/WebParserConfig.cpp
    Src/Executor.cpp
    Src/WebParser.cpp
    Src/GeneralConfig.cpp
    Src/ChatSender.cpp
    Src/Add.cpp
)

set(HEADERS
    Src/DatabaseConnector.h
    Src/WebConnector.h
    Src/WebParserConfig.h
    Src/Executor.h
    Src/WebParser.h
    Src/GeneralConfig.h
    Src/ChatSender.h
    Src/Add.h
)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)  # Desactivar extensiones específicas del compilador


#from here, generated by chatgpt
if (WIN32)
    # Asegurarse de que se use la plataforma x64 en Windows
    if(NOT CMAKE_GENERATOR_PLATFORM)
        set(CMAKE_GENERATOR_PLATFORM x64)
    endif()

    # Ruta del archivo toolchain de vcpkg en Windows
    set(CMAKE_TOOLCHAIN_FILE "${CMAKE_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake")

    # Librerías gestionadas por vcpkg
    find_package(CURL REQUIRED)
    find_package(SQLiteCpp REQUIRED)
    find_package(LibXml2 REQUIRED)
    # rapidjson es header-only, no necesita find_package
    include_directories(${CURL_INCLUDE_DIRS} ${SQLiteCpp_INCLUDE_DIRS} ${LIBXML2_INCLUDE_DIR})

    # Dependencias específicas de Windows como Ws2_32 para curl
    set(WINDOWS_LIBS Ws2_32)

    # Crea un grupo para los archivos .h en Visual Studio
    source_group("Headers" FILES ${HEADERS})

    # Añade el ejecutable
    add_executable(my_project ${SOURCES} ${HEADERS} )

    # Vincular bibliotecas en Windows
    target_link_libraries(my_project ${CURL_LIBRARIES} SQLiteCpp ${LIBXML2_LIBRARIES} ${WINDOWS_LIBS})

elseif (UNIX)

    # Configuración específica para Linux (incluyendo Raspberry Pi)
    find_package(CURL REQUIRED)
    find_package(SQLiteCpp REQUIRED)
    find_package(LibXml2 REQUIRED)
    include_directories(${CURL_INCLUDE_DIRS} ${SQLiteCpp_INCLUDE_DIRS} ${LIBXML2_INCLUDE_DIR})

    # Si estamos en Raspberry Pi o una plataforma que necesita libatomic
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
        set(PLATFORM_LIBS atomic)
    endif()

    # Añade el ejecutable
    add_executable(my_project ${SOURCES} ${HEADERS} )

    # Vincular bibliotecas en Linux
    target_link_libraries(my_project ${CURL_LIBRARIES} SQLiteCpp ${LIBXML2_LIBRARIES} ${PLATFORM_LIBS})

endif()

# rapidjson es header-only, por lo que simplemente se incluyen sus directorios
include_directories(${RAPIDJSON_INCLUDE_DIRS})


# Especificar el uso de C++17
target_compile_features(my_project PRIVATE cxx_std_20)

# Especifica la carpeta fuente y la carpeta de destino
set(SOURCE_DIR "${CMAKE_SOURCE_DIR}/Config")
set(DESTINATION_DIR "${CMAKE_BINARY_DIR}/config")

# Comando para copiar los archivos de source_dir a destination_dir
file(COPY "${SOURCE_DIR}" DESTINATION "${DESTINATION_DIR}")
# Mensaje para confirmar que la copia se realizó
message(STATUS "Archivos copiados de ${SOURCE_DIR} a ${DESTINATION_DIR}")


message(STATUS "CMAKE FINALIZADO")